[{"content":"Context The company has 700 people. It has a period of active growth and a plan to double the number of employees during the year, which was done as a result. Such growth is impossible with unoptimized hiring processes. Plus, any slowdowns in the hiring process affect the speed of bringing new products to market. In addition, it is necessary to make the process so that when a new person joins the team and the company, he can already actively help and build the quality assurance process as early as possible.\nI will not talk about the importance of optimizing the hiring process, but I will tell you how we got from point A to point B, and what those points were.\nAnalysis of the problems of the old hiring process Here I want to describe exactly the original point, point A, where the hire was. Our funnel consisted of 5 stages:\nSourcing of suitable candidates. Communication with the recruiter + a small qa quiz. Technical interview with live coding. Behavioral interview. Offer. Not a very long list of stages, actually. However, there was something to think about. According to a preliminary estimate, it took up to three months to find one QA with us. At the same time, it was believed that we were looking for only Senior+ candidates (masters who know how to use back, front, and mobile, and automate all this), which in principle added certain difficulties.\nEven at this point we had chaos in terms of QA distribution between teams. The initial idea was to hire people into the company and then distribute them using the current priorities (generally this was justified, as the priorities changed in 3 months).\nDue to such a long recruitment process, we have a queue of requests for where we need people and in which teams. Well, the fact that we had the following requests for testers was added to the queue:\nTribe 1: Four QAs in Q1 1 Tribe 2: two QAs in the second quarter, etc We had several tribes, and it was normal to search like this for a quarter. As you can see, there was no mention of specific teams, skills, etc. And this is only a superficial description of the hiring process that took place. There were also nuances with onboarding and the distribution itself. Therefore, everything had to be moved slowly.\nStudy of best practices in recruitment When defining optimization strategies, we did not try to immediately change the entire process and take something from top companies. On the contrary, such things would slow us down and we would not be able to hire the necessary number of suitable QAs. We did all the optimization work gradually, without trying to fix everything at once. That is, we made changes in places critical to us, looked at the impact, and if everything was fine, then we moved on. This allowed us to make improvements without losing the quality of candidates.\nOptimization of the candidate selection process From a process optimization point of view, it was necessary to understand whether all our stages are really improved in terms of time spent, and what we can get rid of without losing the quality of candidates that enter our hiring funnel. We started with processes that we have a direct impact on - this is the technical interview. We had it for 1 hour 30 minutes, and with live coding. Then we wrote extended feedback to managers and candidates. After which a decision was already made whether to move on with the person or not.\nFor optimization, we chose the following strategy:\nWe try to fit in 1 hour. We pick up with live coding. Before the technical interview, we give a test task. Here we took a conscious risk that not everyone will take the test. But as for those who did and did successfully, we already knew that they were more suitable for us. Better that way than learning about it during a live coding session, for example.\nAs for the tests, we explored various solutions and settled on Test Gorilla. As a test, they gave a standard survey on the theory of testing in English (here even some super experienced guys couldn\u0026rsquo;t cope, most likely due to insufficient level of English). The second was a small assignment on Python. The last part is to write test cases for the previous task in Python (later added in JS, due to a different tech stack of teams). In general, the candidate had to spend no more than an hour on the entire test - 10 minutes for the test, 30 minutes for the task and 10 minutes for the test cases. The average speed of solving the problem per code was 10 minutes ;) I think it is fair enough.\nHere we have already felt relief and it has become better in terms of our workload and the quality of candidates. The flow of candidates decreased slightly, but they were of better quality.\nAt the same stage, we touched on improving feedback. We didn\u0026rsquo;t particularly have any templates and each of us gave feedback in his own way. Then we made a feedback document, it was a google form with a knowledge rating scale and open fields for writing. One of the interviewers filled out this document right during the interview. After filling out the form, a script was launched, which generated a regular document from the form and provided access to it to interview participants. And then, if necessary, corrections were made.\nThe feedback consisted of the following three parts:\ngeneral conclusion; recommendations for the future if the candidate is not suitable; feedback on the structure of the conducted interview, for example, hard skills, soft skills, logical tasks, etc. The process we came up with allowed us to provide full, good feedback to the candidate within one business day. I consider it a success.\nAfter all, the improvement of the technical part of the hiring process is almost complete here. We improved the test later, and it turned from an abstract task into something close to real, which QA in our company worked with.\nImproved sampling Along with improving the technical part of hiring, we have been thinking in parallel about how to improve the selection of candidates who get to interview with recruiters (made a kind of shift-left approach in hiring!). It immediately occurred to us that we are looking for candidates from sourcers, who in most cases do not give us those who are suitable, and therefore the percentage of passing in the conclusion is lower. Therefore, we continued to think in this direction.\nIf you recall the initially described process, you can understand that there were no specific requirements for candidates. There were desires something like, we need a senior, a mega-star, etc. We started going to team leaders and heads and finding out what kind of seniors are needed, what they will do, what tasks they will solve. In some cases, it turned out that a senior is not needed, but a strong independent middle is suitable. Yep, the ice moved and we continued. Next, we created a QA Hiring Plan document that is separate from the general company\u0026rsquo;s document. And we began to transfer requests specifically for QA from the full list of open positions there. It was done, for example, like this: instead of one request about four QAs in the tribe, we formed 4 lines for each QA, where we added details, in which team they are looking for, the required level of specialist, the technical stack. Plus, we entered there information about what we are not ready to consider the candidate without, or what is a blocker. It turned out that some teams still had clear requirements.\nThis approach gave us transparency in how much, who and when we needed. After all, sometimes only one of these four specialists was urgently needed. We can leave to hire the rest for the remaining 3-6 months. However, this did not solve all our problems. In general, the situation was deplorable: the demand of QA was about 20 people, but we did not despair ðŸ™‚.\nWe started working closely with recruiters and sourcers. They were told about each position: who we need, why some candidates are suitable for the company, and others are not, etc. Gradually, the quality of candidates increased and we felt it, instead of 10% of successful technical interviews, we received approximately 30%.\nNote I can lie here, it was a long time ago, so the given numbers are approximate At this point, I want to say that the goal of hiring was still not for a specific team, but for the company as a whole, since there were many general requirements and priorities were constantly changing. The heads still personally distributed whom and where to send. But it\u0026rsquo;s not for long :D.\nBy constantly learning from the recruitment side and optimizing our process, we managed to significantly increase the quality of candidates in the first five months, in addition, my team, which was fully engaged in the recruitment process, grew to 6 people and we came into the new year with new forces!\nNew Year and hiring plans The year began with plans to increase the number of employees. Usually, the growth of the company is always accompanied by an approximate increase in the number of positions for the corresponding roles. When planning for the year I estimated that we should hire about x2 people in the new year, at that point we had about 40 QAs, so an extra 40 QAs per year is not a bad plan. We were ready for it, but according to the heads, we still had a big demand of QA (they constantly ask us to find more QAs). At that point, we started looking at hiring differently. Despite the fact that we had a large number of open positions, we decided to use the following 2 approaches in parallel: based on company priorities and hired specifically for the team. We have already learned how to find the necessary candidates for the company, so we decided to try to search immediately in a specific team with the highest priority. All the necessary priorities were already written down in our tablet, so we moved according to them. The second point we made was that we started adding to our interviews QA and those leaders from the teams where the hiring took place, or the same tribe. All these steps allowed us to successfully distribute our time and workload, and in the new year we were able to conduct an average of one technical interview per day.\nWithout further ado, with the gradual improvement in the quality of the candidates, we were able to close the main gap for people in the first quarter. In the end, there were no more than 10 specific open positions, some of which were to be closed in Q2 and Q3, and some of which were just quite specific.\nHowever, there were also failures. For example, we had a good candidate, but they couldn\u0026rsquo;t take him further to the behavioral interview, because the team he was a good fit for hadn\u0026rsquo;t been created yet. Surely no one here could tell us anything about the demand of QAs. Of course, there were also problems with hiring for specific positions, for example, AQA on C#. But here it was already necessary to do the hiring more deeply and find the necessary candidates using other methods.\nThe evaluation of the new hiring process took place when we were looking for another test leader to join our team. The selection consisted of seven candidates, two technical interviews, one offer. 3 weeks passed from the opening of the vacancy (hire request) to the offer. I think that here too it would be possible to speed up, but there are not always free calendar dates :D.\nTL; DR. Here are some takeaways that will help you significantly improve your hiring process:\nConduct the hiring process as transparently as possible with the involvement of all stakeholders. Ask who exactly is needed by the team, why exactly it, what tasks should be performed by the newcomer. (do a job analysis first!) Hiring into a team is easier and better than hiring into a company. Live coding is overrated. Do not use processes from top companies because they may not be suitable for your specific situation. Solve your problems and close requests gradually. Train the entire hiring team (managers, recruiters, sourcers, QAs, etc.). The ideal hiring process is when you can hire a person to the company without conducting interviews and many additional stages. PS Kudos to my team and responsible persons from QA side (Ksenia and Andriy), that helped with such a long run of improvements. And huge thanks to our recruitment team, that listened to all our struggles. It couldn\u0026rsquo;t be impossible without your effort.\n","permalink":"https://grygorenko-artem.github.io/posts/other/hiring-improvements/","summary":"Context The company has 700 people. It has a period of active growth and a plan to double the number of employees during the year, which was done as a result. Such growth is impossible with unoptimized hiring processes. Plus, any slowdowns in the hiring process affect the speed of bringing new products to market. In addition, it is necessary to make the process so that when a new person joins the team and the company, he can already actively help and build the quality assurance process as early as possible.","title":"How we improved our hiring process"},{"content":"Introduction You are a Senior QA. You progress, learn something new, reach new heights on a project or product. And here is the same moment. Your manager comes to you and says: \u0026quot;Dude, you\u0026rsquo;ve done a great job in recent years. You\u0026rsquo;ve helped create cool processes and implemented new tools. And we\u0026rsquo;re ready to promote you to the leader of the testing team. Congratulations!\u0026quot;\nToday I propose to consider the problems and nuances that novice QA Leads face when promoting.\nA small disclaimer. Everything I write is my experience, my reflections, and the experience of colleagues with whom I worked. Also, the QA Lead or QA Manager position may vary from company to company, so this may not apply to you.\nWhen a person is promoted to this position, several effects can usually be felt\nIncreased load; Changing of the coordinate system; Changed priorities and expectations. Let\u0026rsquo;s take a look at these effects below, what they affect, and how to deal with them\nIncreased load. To briefly describe, here are several load directions that can be seen:\nThe responsibility is now not only for oneself. You need to study more. New tasks. And even more to think. That\u0026rsquo;s right, now you are responsible not only for your results as a specialist. You still have to answer for \u0026ldquo;that guy\u0026rdquo;. Working with people and planning team development is responsible and requires certain skills and abilities from the leader. When promoted to the team leader, the workload increases significantly, and this does not mean that the tasks will change completely, but the execution vector is for sure.\nChanging tasks, for example, can look like this: In addition to running the tests - to build a test strategy. In addition to performance testing, conduct a performance review of colleagues. Believe me, it is not as easy as it seems. I am, actually not a big fan of the performance review ðŸ¤“\nAnd, it is also necessary to be able to listen and pay attention to the wishes and needs of employees, to understand (to say it out loud :) ) their thoughts, requests, and motivation. Of course, it is important to promote the development and improvement of employees\u0026rsquo; skills, build communications and build effective teamwork processes. I would say, that it is about to build a culture in the team.\nA team expansion strategy may include planning for the hiring of new employees, analyzing their candidacies and identifying their appropriate positions. It is important to consider the needs of the company and the experience of the employees to find suitable candidates.\nAn employee development strategy may include holding regular 1-1 meetings, collecting employee feedback, motivating them to develop and improve skills, using books and other resources for employee training and development. In order to effectively work with people and plan team development, a leader also needs to constantly learn and develop his skills and abilities. This will help him cope with the increasing workload and be an effective team leader.\nHow to deal with it, or fight it? Actually, I\u0026rsquo;m not going to discover anything super new here. But some tips will be useful for beginners. The first is time management training. Yes, yes, we are all very efficient, know how to be multi-taskers. But this does not mean that you should stop further developing your time management skills. For example, GTD. It will be very useful to be able to work according to this methodology of David Allen. Another tool that will help keep important tasks out of sight is the Eisenhower matrix. Cool stuff, I recommend it. You can read how to use this link And the last thing is to learn to say NO. They will come to you as a QA lead with a lot of requests. From seeing what is there on the project, to checking a specific bug, because they know you and you can help 100%. Don\u0026rsquo;t get carried away ;) But learn to say no. It will be useful in life as well.\nAdditional chips that you can use:\nEat a frog at the beginning of the day; Learn how to use JIRA better. I know for a fact that there is much to be found and learned there. Changing of the coordinate system. In case of promotion to team leader, the coordinate system changes. The QA lead needs to interact with other people such as CTO, Engineering Manager, HR and recruitment departments. You also need to give feedback to colleagues and solve pleasant and unpleasant tasks. This means that a leader needs a new level of interaction with other people and responsibility for achieving new results.\nVarious communication maps will come in handy here.\nAfter promotion, understand who your stakeholders are, what information they want to receive, and how often. Here, choose simple tools and try to unify them. In fact, it won\u0026rsquo;t always be a Slack-type IM. E-mails are also a good way of communication.\nThis is what a communications map might look like: Understanding your coordinate system will help you keep your finger on the pulse and improve your performance to other colleagues and managers. Well, the main rule here will be - simplify and reduce. The fewer different tools and methods of communication there are, the less chaos there will be in actions.\nPriorities and expectations have changed. Depending on the situation, priorities and expectations from the leader change. Now the leader needs to put people and the team\u0026rsquo;s result as a priority, not his own tasks. Expectations are also getting higher. If you apply the Eisenhower matrix, the number of tasks that are important, but not urgent, increases, which poses a risk that everything can go without a plan and control. It is important to take steps to manage this risk and manage your time and resources effectively.\nI had the experience that due to the lack of a direction of priority for the team, I set my own tasks - I missed all the deadlines for the performance review. And this, in turn, led to the fact that we did not promote people who deserve it. Well, this naturally leads to a negative atmosphere in the team. And this is not very good, right?\nWhat to do as a QA Lead What to do when you become a QA lead. Well, first, observe more. You don\u0026rsquo;t have to change everything right away, even if you want to (I know, you\u0026rsquo;ve become a QA Lead for changing things you don\u0026rsquo;t like). But change creates new problems, so put up with them and just watch. After some time, you will be able to effectively begin to change processes and procedures, rather than doing it in an abyss.\nWhile you\u0026rsquo;re there observing, chat with your colleagues. Ask what problems there are in testing, or quality assurance. Look at the narrative in the team/company. How they relate to QA and testers. This will help to better understand the pain points and what to pay attention to in the future.\nOf course, broaden your horizons. Learn something new and look at alternatives. If you only knew JIRA, then look at alternatives (I\u0026rsquo;m sure you\u0026rsquo;ll find better tools ;)). I am super happy with the Linear.app, for example. In addition, things like public speaking, for example, can also help you be a better manager.\nAnd of course, lead by example. You are the person that your colleagues and subordinates look up to. If you say you don\u0026rsquo;t need to stay at work until 10pm - do this as well. After all, all those who look at you will do the same.\nWhat not to do as QA Lead As I wrote above, you don\u0026rsquo;t need to change everything you don\u0026rsquo;t like. This is a mistake made by many leads beginners. In fact, the problem is that if you immediately start changing something without becoming the necessary authority for this, then you will face the fact that people will become defensive and will not want to change something. This resistance will be difficult to overcome, in fact it will be a great pity for everyone.\nIgnore feedback. When promoted to QA Lead, it can happen that this causes a sharp increase in sense of self-importance, but you still need to listen, and listen to what your colleagues tell you. The feedback that comes from them is very valuable information that should not be ignored one hundred percent.\nAnd the last thing is to be afraid to delegate. This may be because you have a lot of responsibility and you want everything to be okay. But by not delegating tasks throughout this chain, you become a bottleneck. In addition, you do not allow your colleagues to develop.\nConclusions Being a QA Lead is not easy and it is a big responsibility. But with constant training, working on mistakes, you can become a really cool manager and an example in your team, company, community.\nThank you\n","permalink":"https://grygorenko-artem.github.io/posts/qalead-struggles/","summary":"Introduction You are a Senior QA. You progress, learn something new, reach new heights on a project or product. And here is the same moment. Your manager comes to you and says: \u0026quot;Dude, you\u0026rsquo;ve done a great job in recent years. You\u0026rsquo;ve helped create cool processes and implemented new tools. And we\u0026rsquo;re ready to promote you to the leader of the testing team. Congratulations!\u0026quot;\nToday I propose to consider the problems and nuances that novice QA Leads face when promoting.","title":"Difficulties after getting promoted to QA Lead"},{"content":"I use a combination of the following tools to achieve my goal:\nBrowser, Pocket, Notion, Obsidian. My main objective is to gather useful information that I can use for Individual Development Plans (IDPs) to teach others and blogs posts. However, in the past, I faced the challenge of having a cluttered Notion database with unread and outdated articles. I used the Notion web-clipper to save articles to my database. However, I still struggled to read all the articles, leading to a mess of information. And acutally this made it difficult for me to manage my information effectively.\nThis is how it looks: Then I discovered Pocket, which proved to be a perfect tool for managing my unread articles. Here is the process I came up with:\nWhen I come across a good article worth reading, I add it to Pocket. During the week, I gather a bunch of articles to read. Once a week, I spend around an hour reading all the articles I saved, taking notes and highlighting important points using Obsidian. After reading, I decide if the article is worth keeping in my Notion database. If not, I move on to other articles. If yes, I add it to my Notion database and include all the necessary information, such as keys, url and so on. As a result, my Notion database is now well-organized and contains only relevant and useful articles.\nActually, I no longer need to use a star rating system as in the previous version.\nIn conclusion, managing articles effectively requires a good system and the right tools. With the help of Pocket, Notion, and Obsidian, I am able to read articles and build my knowledge base efficiently. The image below illustrates my reading process.\n","permalink":"https://grygorenko-artem.github.io/posts/other/howireadarticles/","summary":"I use a combination of the following tools to achieve my goal:\nBrowser, Pocket, Notion, Obsidian. My main objective is to gather useful information that I can use for Individual Development Plans (IDPs) to teach others and blogs posts. However, in the past, I faced the challenge of having a cluttered Notion database with unread and outdated articles. I used the Notion web-clipper to save articles to my database. However, I still struggled to read all the articles, leading to a mess of information.","title":"How I read articles"},{"content":"Starting point Mentoring employees is one of the most important processes in our company. Wise and experienced veterans guide and curate professional growth of new people, helping interns transform into senior test engineers.\nWhen it comes to mentoring, there are many well known approaches one could use: Kolb\u0026rsquo;s cycle, the learning pyramid, Bloom\u0026rsquo;s taxonomy, etc. In Apriorit, we use approach based on Individual Development Plans, or IDPs. The gist of the approach is that the mentor creates a series of assignments for the student, designed to teach them skills and give them experience necessary for a new role. All tasks are formulated with SMART criteria in mind, detailing deadlines and ways in which they can be completed. This looks simple enough on the surface. However, as I found out, it\u0026rsquo;s not that easy in practice.\nFrom middle to senior specialist in one IDP After I trained my first generation of middle testers, I decided to not just stop there and to try and help them grow into seniors. In order to do this, I tried to analyze strong and weak points of each of my students, their approaches to problem solving, as well as how they fare when it comes to communication and collaboration within a team. I sourced opinions from people that directly worked with them, and based on my conclusions, developed unique IDPs for each of my students.\nEach IDP was created with a template-based approach in mind.\nThis means that each IDP was filled with a range of tasks, each formulated in a very precise fashion with detailed instructions on how it should be completed. Each task was designed to serve as a template on how to solve similar problems in the future. I gave my students articles and books to read and problems to solve. These assignments were designed to give them all necessary skills for senior Test Engineer position over the course of a single IDP.\nThere are several advantages to creating IDPs with a template-based approach:\nYou can better cater the next task to a specific person, since you know what skills and knowledge exactly they developed over the course of a previous stage. You know what tools and techniques a person can use and can incorporate this information into your IDP. Template-based IDPs allow to reduce risks due to their predictable nature. When adults perform tasks, formed with a template-based approach in mind, the results will often be very predictable. Similar to McDonalds, no matter in which city you eat, the food will always taste the same.\nHowever, what I found out is that if the student is put in an unfamiliar situation, they tend to fail. When facing the unknown, there is a big chance that they will try to apply the template that they learned to it, and if doesn\u0026rsquo;t quite fit, then they will be unable to solve the taks. This is the point where you start hearing complaints and excuses: \u0026ldquo;I don\u0026rsquo;t have the necessary tools\u0026rdquo;, \u0026ldquo;It can\u0026rsquo;t be done this way\u0026rdquo;, \u0026ldquo;It\u0026rsquo;s impossible to do\u0026rdquo;, etc.\nIf we apply Bloom\u0026rsquo;s taxonomy to the template approach, then we will be able to see that the template-based IDP allows students to reach the level of application, but senior test engineers should be on the level of analysis or synthesis. To make the story short, my students have failed, and thus I have failed as a mentor.\nTake 2 For the next IDP, I decided to try something different. Instead of using a template-based approach, I decided to use a model-based approach. Models are something that finally allowed me to grow the skills of my students to the level of analysis and synthesis in the Bloom\u0026rsquo;s taxonomy.\nIn order to implement this approach, I increased the level of abstraction. Each new task that I designed was aimed at helping students themselves to form their own individual approaches for solving problems. For example, instead of writing \u0026ldquo;Read this particular article and working with people and formulating tasks\u0026rdquo;, I wrote \u0026ldquo;Develop your own approach and a set of tools for effectively managing and controlling tasks of your subordinates.\u0026rdquo;\nTasks like this allow middle test engineers to perform certain actions that they wouldn\u0026rsquo;t be able to do in a template-based approach:\nAnalyze the current situation Study available tools and resources Ask for advice from more experienced employees Apply new knowledge in practice Reach their own conclusions and maybe come up with something new This makes it so that employees are not limited by the instructions that you\u0026rsquo;ve given them, and try to find their own ways to solve the problem. For example, let\u0026rsquo;s take a position of test-manager. A person that was tutored with a model-based approach when transitioning into this role on the new project will be able to bring their own new ideas, as well as propose some improvements to the already established processes, etc.\nThe person that is tutored via a template-based approach would not be able to offer something new. This is not necessarily bad though, since sometimes you don\u0026rsquo;t want to fix things that are not broken. A person like that will be able to pick up existing processes and fit right in.\nConclusion It\u0026rsquo;s hard to say that one approach is definitely better than the other. Both have their own advantages and disadvantages. I found out that it\u0026rsquo;s worth it to pick and choose depending on the situation and personality of an employee that you\u0026rsquo;re mentoring.\nBut generally speaking, Junior and middle test engineers will usually perform better when given assignments designed with the template-based approach. Such assignments will help them expand their knowledge quickly and teach them how typical tasks are solved within the company. However, when you need to develop analytical skills in a person, which is often the case when you\u0026rsquo;re training them for senior position, model-based approach often works best. In any case, you should definitely choose your own solutions depending on your own situation.\n","permalink":"https://grygorenko-artem.github.io/posts/modelvstemplate/","summary":"Starting point Mentoring employees is one of the most important processes in our company. Wise and experienced veterans guide and curate professional growth of new people, helping interns transform into senior test engineers.\nWhen it comes to mentoring, there are many well known approaches one could use: Kolb\u0026rsquo;s cycle, the learning pyramid, Bloom\u0026rsquo;s taxonomy, etc. In Apriorit, we use approach based on Individual Development Plans, or IDPs. The gist of the approach is that the mentor creates a series of assignments for the student, designed to teach them skills and give them experience necessary for a new role.","title":"Model vs Template: How I failed as a mentor and what I learned from myÂ mistakes"},{"content":" Manager with 10+ years of experience in IT. Speaker and author of quality assurance and people management webinars and conferences.\nBlogger [UA]: https://t.me/a_grygorenko Podcaster [UA]: https://spoti.fi/3LAku0Q Here is my CV\nPerforming management activities for complex projects of different sizes and development life cycles. Specializing in complex fields, including forensics, virtualization, fintech, blockchain, and corporate security. Strong experience in research of different natures, including competitor analysis from a technical standpoint, products, and services that support have to be added. Experienced in identifying and analyzing product and project risks, creating risk mitigation plans, helping monitor project risks occurrence, and creating plans for unplanned risks.\nIT Consulting I am approached by people from other companies, both for advice on personal growth, career, professional development, approach to work, and for assistance in building teams, work processes in them, interviewing candidates, etc.\nI am ready to individually help in solving your problems and share my knowledge personally with you for 50$ per hour for individuals and 100$ per hour for legal entities. We can call on whatsapp, google meet, zoom, telegram or anywhere else where it is convenient for you.\n\u0026lsaquo; \u0026rsaquo; Email Me ","permalink":"https://grygorenko-artem.github.io/about/","summary":"Manager with 10+ years of experience in IT. Speaker and author of quality assurance and people management webinars and conferences.\nBlogger [UA]: https://t.me/a_grygorenko Podcaster [UA]: https://spoti.fi/3LAku0Q Here is my CV\nPerforming management activities for complex projects of different sizes and development life cycles. Specializing in complex fields, including forensics, virtualization, fintech, blockchain, and corporate security. Strong experience in research of different natures, including competitor analysis from a technical standpoint, products, and services that support have to be added.","title":"About Me"},{"content":"This is the list of my talks 01/02/2023 Think first approach. How to make your work better [EN] @Ministry of Testing Abu Dhabi\n01/05/2022 10 Worst Pieces of Advice for a software tester [EN] @Ministry of Testing Abu Dhabi\n","permalink":"https://grygorenko-artem.github.io/talks/","summary":"This is the list of my talks 01/02/2023 Think first approach. How to make your work better [EN] @Ministry of Testing Abu Dhabi\n01/05/2022 10 Worst Pieces of Advice for a software tester [EN] @Ministry of Testing Abu Dhabi","title":"My Talks"}]